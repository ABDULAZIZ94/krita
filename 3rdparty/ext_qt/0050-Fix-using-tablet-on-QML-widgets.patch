diff --git a/qtbase/src/plugins/platforms/windows/qwindowspointerhandler.cpp b/qtbase/src/plugins/platforms/windows/qwindowspointerhandler.cpp
index 9a8b5d512..4a8322337 100644
--- a/qtbase/src/plugins/platforms/windows/qwindowspointerhandler.cpp
+++ b/qtbase/src/plugins/platforms/windows/qwindowspointerhandler.cpp
@@ -639,14 +639,16 @@ bool QWindowsPointerHandler::translatePenEvent(QWindow *window, HWND hwnd, QtWin
 #endif
 }
 
-static inline bool isMouseEventSynthesizedFromPenOrTouch()
+static inline bool isMouseEventSynthesizedFromPen()
 {
     // For details, see
     // https://docs.microsoft.com/en-us/windows/desktop/tablet/system-events-and-mouse-messages
     const LONG_PTR SIGNATURE_MASK = 0xFFFFFF00;
     const LONG_PTR MI_WP_SIGNATURE = 0xFF515700;
 
-    return ((::GetMessageExtraInfo() & SIGNATURE_MASK) == MI_WP_SIGNATURE);
+    const quint64 extraInfo = ::GetMessageExtraInfo();
+
+    return ((extraInfo & SIGNATURE_MASK) == MI_WP_SIGNATURE) && (extraInfo & 0x80);
 }
 
 bool QWindowsPointerHandler::translateMouseWheelEvent(QWindow *window,
@@ -716,7 +718,7 @@ bool QWindowsPointerHandler::translateMouseEvent(QWindow *window,
     }
 
     Qt::MouseEventSource source = Qt::MouseEventNotSynthesized;
-    if (isMouseEventSynthesizedFromPenOrTouch()) {
+    if (isMouseEventSynthesizedFromPen()) {
         if (QWindowsIntegration::instance()->options() & QWindowsIntegration::DontPassOsMouseEventsSynthesizedFromTouch)
             return false;
         source = Qt::MouseEventSynthesizedBySystem;
diff --git a/qtbase/src/plugins/platforms/windows/qwindowstabletsupport.cpp b/qtbase/src/plugins/platforms/windows/qwindowstabletsupport.cpp
index fa209f09c..462be8b3f 100644
--- a/qtbase/src/plugins/platforms/windows/qwindowstabletsupport.cpp
+++ b/qtbase/src/plugins/platforms/windows/qwindowstabletsupport.cpp
@@ -434,6 +434,14 @@ bool QWindowsTabletSupport::translateTabletProximityEvent(WPARAM /* wParam */, L
     if (m_currentDevice < 0) {
         m_currentDevice = m_devices.size();
         m_devices.push_back(tabletInit(uniqueId, cursorType));
+    } else {
+        /**
+         * The user can switch pressure sensitivity level in the driver,
+         * which will make our saved values invalid (this option is
+         * provided by Wacom drivers for compatibility reasons, and
+         * it can be adjusted on the fly)
+         */
+        m_devices[m_currentDevice] = tabletInit(uniqueId, cursorType);
     }
     m_devices[m_currentDevice].currentPointerType = pointerType(currentCursor);
     m_state = PenProximity;
@@ -454,7 +462,6 @@ bool QWindowsTabletSupport::translateTabletPacketEvent()
         return false;
 
     const int currentDevice = m_devices.at(m_currentDevice).currentDevice;
-    const int currentPointer = m_devices.at(m_currentDevice).currentPointerType;
     const qint64 uniqueId = m_devices.at(m_currentDevice).uniqueId;
 
     // The tablet can be used in 2 different modes (reflected in enum Mode),
@@ -484,6 +491,28 @@ bool QWindowsTabletSupport::translateTabletPacketEvent()
     for (int i = 0; i < packetCount ; ++i) {
         const PACKET &packet = localPacketBuf[i];
 
+        int currentPointer = m_devices.at(m_currentDevice).currentPointerType;
+
+        const int packetPointerType = pointerType(packet.pkCursor);
+        if (!packet.pkButtons && packetPointerType != currentPointer) {
+
+            QWindowSystemInterface::handleTabletLeaveProximityEvent(packet.pkTime,
+                                                                    m_devices.at(m_currentDevice).currentDevice,
+                                                                    m_devices.at(m_currentDevice).currentPointerType,
+                                                                    m_devices.at(m_currentDevice).uniqueId);
+
+
+
+            m_devices[m_currentDevice].currentPointerType = packetPointerType;
+
+            QWindowSystemInterface::handleTabletEnterProximityEvent(packet.pkTime,
+                                                                    m_devices.at(m_currentDevice).currentDevice,
+                                                                    m_devices.at(m_currentDevice).currentPointerType,
+                                                                    m_devices.at(m_currentDevice).uniqueId);
+
+            currentPointer = packetPointerType;
+        }
+
         const int z = currentDevice == QTabletEvent::FourDMouse ? int(packet.pkZ) : 0;
 
         QPointF globalPosF =
